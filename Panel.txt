package com;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.swing.JPanel;



public class Panel extends JPanel{
	
	//1.定义背景图
	BufferedImage bg;//背景图
	//创建敌机
	Ep ep=new Ep();
	//创建敌机的大本营（所有的敌机都放在这里）
	List<Ep> eps=new ArrayList<Ep>();
	//创建子弹的弹药库
	List<Fire> fs=new ArrayList<Fire>();
	Hero hero=new Hero() ;
	//定义分数
	int score;
	//设置游戏开关
	boolean gameover=true;//游戏 开始时，gameover为false;游戏结束时，gameover为true
	boolean hpp=true;
	//设置英雄机的火力
	int power=1;
	
	public void action() {
		new Thread() {
			public void run() {
				while(true) {
					if(!gameover) {
						//调用敌机入场的方法
						epEnter();
						//敌机移动
						epMove();
						//发射子弹
						fire();
						//让子弹移动
						fireMove();
						//判断子弹是否打到敌机
						fireEp();
						//判断敌机撞到英雄机
						hit();
						//每执行一次，休息一会儿
						//线程休眠，SLEEP（毫秒数）
						try {
							Thread.sleep(20);
						} catch (InterruptedException e) {
							// TODO 自动生成的 catch 块
							e.printStackTrace();
						}
						//重绘
						repaint();
					}

				}
			}
			
			int index=0;
			private void epEnter() {
				//就执行的次数
				index++;
				if(index>=60) {
					//1.创建敌机
					Ep e=new Ep();
					//2.将敌机加入到敌机大本营中
					eps.add(e);
					//将index重新设置为0
					index=0;
				}
			}
			private void epMove() {
				//遍历所有的敌机
				for(int i=0;i<eps.size();i++) {
					//获取灭一个敌机
					Ep e=eps.get(i);
					//让敌机移动
					e.move();
				}
			}
			
			int findex=0;
			private void fire() {
				findex++;
				
				//创建子弹
               if(findex>=8) {
					if(power==1) {
						Fire fire2=new Fire(hero.x+45,hero.y-20,1);
						fs.add(fire2);
					}else if(power==2){
						Fire fire1=new Fire(hero.x+15,hero.y,1);
						fs.add(fire1);
						Fire fire3=new Fire(hero.x+75,hero.y,1);
						fs.add(fire3);
					}else {
						Fire fire1=new Fire(hero.x+15,hero.y,0);//左边子弹
						fs.add(fire1);
						Fire fire2=new Fire(hero.x+45,hero.y-20,1);//中间子弹
						fs.add(fire2);
						Fire fire3=new Fire(hero.x+75,hero.y,2);//右边子弹
						fs.add(fire3);
					}
					findex=0;
				}
			}	
		}.start();
	}
           	private void fireMove() {
		       //遍历所有子弹
		        for(int i=0;i<fs.size();i++) {
			   //获取每一颗子弹
			        Fire f=fs.get(i);
			       //让子弹移动
			       f.move();
		          }
	         }
			private void fireEp() {
				//遍历所有的子弹
				for(int i=0;i<fs.size();i++) {
					Fire f=fs.get(i);
					//每拿一颗子弹，就判断一下子弹是否击中敌机
					bang(f);
				}
			}
			private void bang(Fire f) {
				//遍历所有的敌机
				for(int i=0;i<eps.size();i++) {
					Ep e=eps.get(i);
					//判断这个子弹是否击中了敌机
					if(e.shootBy(f)) {
						if(e.type!=15&&e.type!=16&&e.type!=17) {
							//如果敌机被子弹击中
							//1.让敌机的血量减少
							e.bv--;
							if(e.bv==0) {
								//2.敌机死亡（消失：从敌机大本营中删除）
								eps.remove(e);
								//3.增加分数
								if(e.type<10) {
									score+=1;
								}else if(e.type<13) {
									score+=3;
								}else if(e.type<15){
									score+=5;
								}
							}
							//4.子弹消失：从弹药库中删除子弹
							fs.remove(f);
						}else if(e.type==16||e.type==17) {

						}else {
							//4.子弹消失：从弹药库中删除子弹
							fs.remove(f);
						}
					} 
				}
			}
    private void hit() {//英雄机碰到敌机的方法
		//遍历敌机
		for(int i=0;i<eps.size();i++) {
			//获取一个敌机
			Ep e=eps.get(i);
			//如果敌机被英雄机撞上了 
			if(e.hitBy(hero)) {
				if(e.type!=15&&e.type!=16&&e.type!=17) {
					//2.英雄机的血量减少
					hero.bv--;
					//英雄机火力回复为初始值
					power=1;
					//3.增加分数
					score+=1;
				}else if(e.type==16){
					if(hero.bv<=10) {
						hero.bv++;//英雄机血量增加
					}
				}else if(e.type==17) {
					if(power!=3) {
						power++;
					}
				}else {
					hero.bv-=3;
				}
				//删除敌机
				eps.remove(e);
				//4.当英雄机的血量减少到0时，游戏结束
				if(hero.bv<=0) {
					//游戏结束
					gameover=true;
				}
			}
		}
	}
	
	
	public Panel(Frame frame) {
		//设置背景
		setBackground(Color.pink); 
		//初始化图片
		bg=Image.getImg("/img/bg2.jpg");
		//		//使用鼠标监听器（固定格式）
		//1.创建鼠标适配器
		MouseAdapter mouse=new MouseAdapter() {
			//2.确定需要监听鼠标的事件
			public void mouseClicked(MouseEvent e) {
				//点击鼠标时，会执行的代码
				//游戏结束，点击重新开始，
				if(gameover==true) {
					gameover=false;
					hpp=false;
					action();
					hero.bv=3;
					eps.clear();
					fs.clear();
					score=0;
					repaint();
					Random re=new Random();
					int index=re.nextInt(5)+1;
					bg=Image.getImg("/img/bg"+index+".jpg");
					
				}
			} 
			public void mouseMoved(MouseEvent e) {
				//获取鼠标的横纵坐标
				int mx=e.getX();//鼠标的横坐标
				int my=e.getY();//鼠标的纵坐标
                //如果游戏没结束，英雄机跟着鼠标移动
				if(!gameover) {
					//让英雄机移动到鼠标的位置点（英雄机的行为，可以在英雄机中定义移动到鼠标位置的方法）
					hero.moveToMouse(mx, my);
				}

				//刷新界面，将英雄机绘制到新的位置上
			
				repaint();
			}
			
		};
		//3.将适配器加入到监听器中
		addMouseListener(mouse);
		addMouseMotionListener(mouse);
	
		//1.创建键盘适配器
		KeyAdapter kd=new KeyAdapter() {
			//2.确定需要监听的键盘事件
			@Override
			public void keyPressed(KeyEvent e) {
				//当按下键盘的按键时，会触发的方法
				//监听键盘的按键
				//每一个键盘的按键都对应的有一个数字
				//获取键盘上案件是的数字
				int keyCode=e.getKeyCode();
				//如果按了上键
				if(keyCode==KeyEvent.VK_UP) {
					//英雄级向上移动
					hero.moveUp();
				}else if(keyCode==KeyEvent.VK_DOWN) {
					//英雄机向下移动
					hero.moveDown();
				}else if(keyCode==KeyEvent.VK_LEFT) {
					//英雄机向左移动
					hero.moveLeft();
				}else if(keyCode==KeyEvent.VK_RIGHT) {
					//英雄机向右移动
					hero.moveRight();
				}else if(keyCode==87) {
					hero.moveUp();
				}else if(keyCode==83) {
					hero.moveDown();
				}else if(keyCode==65) {	
					hero.moveLeft();
				}else if(keyCode==68) {		
					hero.moveRight();
				}
				repaint();
			}
		};
		//3.将适配器加入到窗体的键盘监听器中
		frame.addKeyListener(kd);
	}
	@Override
	public void paint(Graphics g) {
		// TODO 自动生成的方法存根
		super.paint(g);
		//画图片
		//g.drawimage(图片，图片的横坐标，图片的纵坐标，null)；
		//横纵坐标，时设置图片左上角的坐标
		//画图片时，如果不加宽度和高度，画的时原图片的大小
		//如果想改变图片大小，可以使用如下的格式
		//g.drawimage(图片，图片的横坐标，图片的纵坐标，图片的宽度，图片的高度，null)；

		g.drawImage(bg,0,0,null);
		//在paint中画图是由顺序的，先画的会被后画的覆盖
		//g.drawimage(图片，图片的横坐标，图片的纵坐标，图片的宽度，图片的高度，null)；
		g.drawImage(hero.img,hero.x,hero.y,hero.w,hero.h,null);
		//画敌机
		//便利敌机大本营，集合，画出所有的敌机
		for(int i=0;i<eps.size();i++) {
			Ep ep=eps.get(i);
			g.drawImage(ep.img, ep.x, ep.y, ep.w, ep.h, null);	
		}
		//画子弹
		for(int i=0;i<fs.size();i++) {
			Fire fire=fs.get(i);
			g.drawImage(fire.img, fire.x, fire.y, fire.w, fire.h, null);	
		}
		//画分数
		g.setColor(Color.WHITE);
		g.setFont(new Font("楷体",Font.BOLD,20 ));
		g.drawString("分数"+score, 10, 30);

		//画英雄机的血量
		for(int i=0;i<hero.bv;i++) {
			//g.drawimage(图片，图片的横坐标，图片的纵坐标，图片的宽度，图片的高度，null)；
			g.drawImage(hero.img,100+i*40,5,30,30,null);
		}
		
		//当游戏结束时，画出Gameover
		if(gameover==true && hpp==true){
			g.setColor(Color.white);
			g.setFont(new Font("楷体",Font.BOLD,20));
			g.drawString("点击开始游戏",200,470);
		}else if(gameover==true && hpp==false){
			g.setColor(Color.WHITE);
			g.setFont(new Font("楷体",Font.BOLD,35));
			g.drawString("GAME OVER",175, 400);
			g.setColor(Color.white);
			g.setFont(new Font("楷体",Font.BOLD,20));
			g.drawString("点击开始游戏",200,470);
		}
	}
}
